name: .NET

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  TEST_PROJECT_PATH: ./tests/SampleApp.Tests
  IMAGE_NAME: tfsantosbr/dotnet-sample-api:latest
  INTEGRATION_TESTS_PATH: ./tests/SampleApp.Integration.Tests
  DOCKERFILE_PATH: ./src/SampleApp.Api/Dockerfile

jobs:

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Test Application
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --verbosity minimal --logger:"html;LogFileName=tests-results.html" --collect:"XPlat Code Coverage"

      - name: Install Tests Report Tools
        if: success()
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run Test Coverage Report
        if: success()
        run: |
          cd ${{ env.TEST_PROJECT_PATH }}/TestResults
          cd $(ls -d */|head -n 1)
          reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html

      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v3
        env:
          TESTS_REPORT_PATH: ${{ env.TEST_PROJECT_PATH }}/TestResults/
        if: success()
        with:
          name: tests-results
          path: ${{ env.TESTS_REPORT_PATH }}
          retention-days: 30

      - name: Upload Test Failures Report
        uses: actions/upload-artifact@v3
        if: failure()
        env:
          TESTS_ERRORS_REPORT_PATH: ${{ env.TEST_PROJECT_PATH }}/TestResults/tests-results.html
        with:
          name: tests-errors-result
          path: ${{ env.TESTS_ERRORS_REPORT_PATH }}
          retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Install .NET Global Tools for Analysis
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin -o:tfsantosbr -k:tfsantosbr_dotnet-sample-api -d:sonar.host.url=https://sonarcloud.io -d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-incremental
          dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
          dotnet sonarscanner end

  integration-load-tests:
    name: Integration and Load Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Docker Compose
        run: |
          docker-compose up -d
          docker container ls

      - name: "Wait for docker to finish building"
        run: sleep 30

      - name: docker ps
        run: docker-compose ps

      - name: Run Integration Tests
        run: |
          newman run ${{ env.INTEGRATION_TESTS_PATH }}/integration-tests.json -e ${{ env.INTEGRATION_TESTS_PATH }}/environments/docker.environment.json

      - name: Run Load Tests (K6)
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/SampleApp.Load.Tests/script.js
          flags: --env HOSTNAME=http://172.17.0.1:5000

  build:
    name: Build and Push Docker Image
    needs:
      - integration-load-tests
      - unit-tests
      - code-quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ env.IMAGE_NAME }}

