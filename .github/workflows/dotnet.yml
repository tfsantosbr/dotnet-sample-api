name: .NET

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  TEST_PROJECT_PATH: ./tests/SampleApp.Tests

  NOME_WEBAPP: groffe-apitemperatura
  IMAGE_NAME: tfsantosbr/dotnet-sample-api
  INTEGRATION_TESTS_PATH: ./tests/SampleApp.Integration.Tests

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET 5
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.102

      - name: Testes com .NET 5 + xUnit + Coverlet
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --verbosity minimal --logger:"html;LogFileName=tests-results.html" --collect:"XPlat Code Coverage"

      - name: Instalar ReportGenerator
        if: success()
        run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.4

      - name: Gerar relatório de cobertura de testes com ReportGenerator
        if: success()
        run: |
          cd ${{ env.TEST_PROJECT_PATH }}/TestResults
          cd $(ls -d */|head -n 1)
          reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html

      - name: Upload como Artifact dos Reports de Resultado de Testes Executados com Sucesso + Cobertura de Código
        uses: actions/upload-artifact@v2.2.2
        env:
          TESTS_REPORT_PATH: ${{ env.TEST_PROJECT_PATH }}/TestResults/
        if: success()
        with:
          name: tests-results
          path: ${{ env.TESTS_REPORT_PATH }}
          retention-days: 30

      - name: Upload como Artifact do Report de Testes com Falhas
        uses: actions/upload-artifact@v2.2.2
        if: failure()
        env:
          TESTS_ERRORS_REPORT_PATH: ${{ env.TEST_PROJECT_PATH }}/TestResults/tests-results.html
        with:
          name: tests-errors-result
          path: ${{ env.TESTS_ERRORS_REPORT_PATH }}
          retention-days: 30

  build:
    needs: [tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build de imagem
        run: |
          docker build . --file Dockerfile --tag ${{ env.IMAGE_NAME }}:latest

      - name: Criação de container para testes com a API
        run: |
          docker run -p 5000:80 -d ${{ env.IMAGE_NAME }}:latest
          docker container ls

      - name: Testes da API REST com Newman
        run: |
          newman run ${{ env.INTEGRATION_TESTS_PATH }}/integration-tests.json -e ${{ env.INTEGRATION_TESTS_PATH }}/environments/docker.environment.json

